// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using CodeOfChaos.CliArgsParser.Generators.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;

namespace CodeOfChaos.CliArgsParser.Generators.Content.ParametersGenerator;

// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
[Generator(LanguageNames.CSharp)]
public class Generator : IIncrementalGenerator{
    public void Initialize(IncrementalGeneratorInitializationContext context) {
        IncrementalValueProvider<ImmutableArray<ParameterStructDto>> parameterStructs = context.SyntaxProvider
            .CreateSyntaxProvider(
                IsParameterStruct,
                GatherParameterStruct
            ).Collect();
        
        context.RegisterSourceOutput(context.CompilationProvider.Combine(parameterStructs), GenerateSources);
    }

    private static bool IsParameterStruct(SyntaxNode node, CancellationToken _) {
        if (node is not StructDeclarationSyntax { BaseList: { Types.Count: > 0 } baseList, Members: var members }) return false;

        if (!baseList.Types.Any(
                type => type.Type is IdentifierNameSyntax genericNameSyntax
                    && genericNameSyntax.Identifier.ValueText.Contains("IParameters")
            )) return false;

        return members.OfType<PropertyDeclarationSyntax>()
            .SelectMany(prop => prop.AttributeLists.SelectMany(attrs => attrs.Attributes))
            .Any(attr => attr.Name.ToString().Contains("CliArgsParameter")
            );

    }

    private static ParameterStructDto GatherParameterStruct(GeneratorSyntaxContext context, CancellationToken cancellationToken) {
        return ParameterStructDto.FromSyntax(context, (StructDeclarationSyntax)context.Node);
    }
    
    private static void GenerateSources(SourceProductionContext context, (Compilation compilation, ImmutableArray<ParameterStructDto> data) source) {
        GeneratorStringBuilder builder = new();

        foreach (ParameterStructDto dto in source.data) {
            // We can only report diagnostics in this context, so do it here!
            dto.ReportDiagnostics(context);

            // After which we build the string to our best capabilities, which might result in errors
            //      These errors should resolve themselves if the user writes the correct data on their end.
            builder
                .AppendAutoGenerated()
                .AppendUsings(
                    "CodeOfChaos.CliArgsParser", 
                    "CodeOfChaos.CliArgsParser.Contracts"
                )
                .AppendLine($"namespace {dto.Namespace};")
                .AppendLine("#nullable enable")
                .AppendLine($"public partial struct {dto.ToDeclarationName()} {{")
                .IndentLine($"public static {dto.ClassName} FromRegistry(IUserInputRegistry registry) {{")
                .IndentLine($"return new() {{")
                .Indent();

            foreach (PropertyDto propertyDto in dto.PropertyDtos) {
                builder.AppendLine(propertyDto.ToPropertyInitialization());
            }

            builder
                .UnIndentLine("};")
                .UnIndentLine("}")
                .UnIndentLine("}");
            
            context.AddSource($"{dto.ClassName}.g.cs", builder.ToStringAndClear());
        }
        
        
    }
}
